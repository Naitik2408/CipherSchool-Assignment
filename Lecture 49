Check if two trees are mirror of each other->
code ->
here is structure of tree

tree1              

    1              
   / \
  2   3
 / \
4   5

tree 2
    1
   / \
  3   2
     / \
    5   4

class Node {
    int data;
    Node left, right;

    Node(int item) {
        data = item;
        left = right = null;
    }
}

public class BinaryTree {

    Node root;

    
    boolean areMirrors(Node root1, Node root2) {
        // If both trees are empty, they are mirrors
        if (root1 == null && root2 == null) {
            return true;
        }

        // If one of the trees is empty, they are not mirrors
        if (root1 == null || root2 == null) {
            return false;
        }

        
    
        return (root1.data == root2.data)
                && areMirrors(root1.left, root2.right)
                && areMirrors(root1.right, root2.left);
    }

    public static void main(String[] args) {
        BinaryTree tree1 = new BinaryTree();
        tree1.root = new Node(1);
        tree1.root.left = new Node(2);
        tree1.root.right = new Node(3);
        tree1.root.left.left = new Node(4);
        tree1.root.left.right = new Node(5);

        BinaryTree tree2 = new BinaryTree();
        tree2.root = new Node(1);
        tree2.root.left = new Node(3);
        tree2.root.right = new Node(2);
        tree2.root.right.left = new Node(5);
        tree2.root.right.right = new Node(4);

        if (tree1.areMirrors(tree1.root, tree2.root)) {
            System.out.println("The trees are mirrors of each other.");
        } else {
            System.out.println("The trees are not mirrors of each other.");
        }
    }
}

convert a tree in to its mirror

code ->

class Node {
    int data;
    Node left, right;

    Node(int item) {
        data = item;
        left = right = null;
    }
}

public class BinaryTree {

    Node root;

    void mirror(Node node) {
        if (node == null) {
            return;
        }

        mirror(node.left);
        mirror(node.right);

        // Swap the left and right children
        Node temp = node.left;
        node.left = node.right;
        node.right = temp;
    }

    void inOrder(Node node) {
        if (node == null) {
            return;
        }
        inOrder(node.left);
        System.out.print(node.data + " ");
        inOrder(node.right);
    }

    public static void main(String[] args) {
        BinaryTree tree = new BinaryTree();
        tree.root = new Node(1);
        tree.root.left = new Node(2);
        tree.root.right = new Node(3);
        tree.root.left.left = new Node(4);
        tree.root.left.right = new Node(5);
        tree.root.right.left = new Node(6);
        tree.root.right.right = new Node(7);

        System.out.println("In-order traversal of the original tree:");
        tree.inOrder(tree.root);
        System.out.println();

        // Convert to mirror
        tree.mirror(tree.root);

        System.out.println("In-order traversal of the mirrored tree:");
        tree.inOrder(tree.root);
        System.out.println();
    }
}


check if two tree have same  structure ->
code->

class Node {
    int data;
    Node left, right;

    Node(int item) {
        data = item;
        left = right = null;
    }
}

public class BinaryTree {

    Node root;

   
    boolean isSameStructure(Node root1, Node root2) {
  
        if (root1 == null && root2 == null) {
            return true;
        }

    
        if (root1 == null || root2 == null) {
            return false;
        }

        
        return isSameStructure(root1.left, root2.left) && isSameStructure(root1.right, root2.right);
    }

    public static void main(String[] args) {
        BinaryTree tree1 = new BinaryTree();
        tree1.root = new Node(1);
        tree1.root.left = new Node(2);
        tree1.root.right = new Node(3);
        tree1.root.left.left = new Node(4);
        tree1.root.left.right = new Node(5);

        BinaryTree tree2 = new BinaryTree();
        tree2.root = new Node(1);
        tree2.root.left = new Node(2);
        tree2.root.right = new Node(3);
        tree2.root.left.left = new Node(4);
        tree2.root.left.right = new Node(5);

        if (tree1.isSameStructure(tree1.root, tree2.root)) {
            System.out.println("The trees have the same structure.");
        } else {
            System.out.println("The trees do not have the same structure.");
        }
    }
}

HOMEWORK->
two trees are isomorphic ->
CODE->


class Node {
    int data;
    Node left, right;

    Node(int item) {
        data = item;
        left = right = null;
    }
}

public class BinaryTree {

    Node root;

    // Method to check if two trees are isomorphic
    boolean isIsomorphic(Node root1, Node root2) {
        // If both trees are empty, they are isomorphic
        if (root1 == null && root2 == null) {
            return true;
        }

        // If one of the trees is empty and the other is not, they are not isomorphic
        if (root1 == null || root2 == null) {
            return false;
        }

        // If the root nodes have different data, they are not isomorphic
        if (root1.data != root2.data) {
            return false;
        }

        // Check if the subtrees are isomorphic in both possible ways:
        // 1. No mirroring of subtrees
        // 2. Mirroring of subtrees (left with right and right with left)
        return (isIsomorphic(root1.left, root2.left) && isIsomorphic(root1.right, root2.right))
                || (isIsomorphic(root1.left, root2.right) && isIsomorphic(root1.right, root2.left));
    }

    public static void main(String[] args) {
        BinaryTree tree1 = new BinaryTree();
        tree1.root = new Node(1);
        tree1.root.left = new Node(2);
        tree1.root.right = new Node(3);
        tree1.root.left.left = new Node(4);
        tree1.root.left.right = new Node(5);

        BinaryTree tree2 = new BinaryTree();
        tree2.root = new Node(1);
        tree2.root.left = new Node(3);
        tree2.root.right = new Node(2);
        tree2.root.right.left = new Node(5);
        tree2.root.right.right = new Node(4);

        if (tree1.isIsomorphic(tree1.root, tree2.root)) {
            System.out.println("The trees are isomorphic.");
        } else {
            System.out.println("The trees are not isomorphic.");
        }
    }
}
