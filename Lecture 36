
Insertion point in y shaped linked list
code ->

class ListNode {
    int val;
    ListNode next;
    
    ListNode(int x) {
        val = x;
        next = null;
    }
}

public class Solution {
    public ListNode getIntersectionNode(ListNode headA, ListNode headB) {
        if (headA == null || headB == null) {
            return null;
        }
        
        ListNode ptr1 = headA;
        ListNode ptr2 = headB;
        
        while (ptr1 != ptr2) {
            // Move ptr1 to the next node
            ptr1 = (ptr1 == null) ? headB : ptr1.next;
            // Move ptr2 to the next node
            ptr2 = (ptr2 == null) ? headA : ptr2.next;
        }
        
        return ptr1; 
    }
}

Detect loop in linked list 
code->


class ListNode {
    int val;
    ListNode next;

    ListNode(int x) {
        val = x;
        next = null;
    }
}

public class Solution {
    public boolean hasCycle(ListNode head) {
        if (head == null || head.next == null) {
            return false;
        }

        ListNode slow = head;
        ListNode fast = head;

        while (fast != null && fast.next != null) {
            slow = slow.next;
            fast = fast.next.next;

            if (slow == fast) {
                return true;
            }
        }

        return false;
    }

    public static void main(String[] args) {
        // Create example linked list
        ListNode node1 = new ListNode(1);
        ListNode node2 = new ListNode(2);
        ListNode node3 = new ListNode(3);
        ListNode node4 = new ListNode(4);

        // Linked list: 1 -> 2 -> 3 -> 4 -> 2 (cycle)
        node1.next = node2;
        node2.next = node3;
        node3.next = node4;
        node4.next = node2; // Create a cycle

        Solution solution = new Solution();

        // Check if the linked list has a cycle
        boolean hasCycle = solution.hasCycle(node1);

        // Output the result
        if (hasCycle) {
            System.out.println("The linked list has a cycle.");
        } else {
            System.out.println("The linked list does not have a cycle.");
        }
    }
}

remove loop in linked lsit
code ->

class ListNode {
    int val;
    ListNode next;

    ListNode(int x) {
        val = x;
        next = null;
    }
}

public class Solution {
    public void removeCycle(ListNode head) {
        if (head == null || head.next == null) {
            return;
        }

        ListNode slow = head;
        ListNode fast = head;
        ListNode meetingPoint = null;

        // Detect the cycle using Floyd's Cycle-Finding Algorithm
        while (fast != null && fast.next != null) {
            slow = slow.next;
            fast = fast.next.next;

            if (slow == fast) {
                meetingPoint = slow;
                break;
            }
        }

        // If there is no cycle, return
        if (meetingPoint == null) {
            return;
        }

        // Find the start of the cycle
        ListNode ptr1 = head;
        ListNode ptr2 = meetingPoint;
        while (ptr1 != ptr2) {
            ptr1 = ptr1.next;
            ptr2 = ptr2.next;
        }

        // Find the node just before the start of the cycle
        while (ptr2.next != ptr1) {
            ptr2 = ptr2.next;
        }

        // Remove the cycle
        ptr2.next = null;
    }

    public static void main(String[] args) {
        // Create example linked list
        ListNode node1 = new ListNode(1);
        ListNode node2 = new ListNode(2);
        ListNode node3 = new ListNode(3);
        ListNode node4 = new ListNode(4);

        // Linked list: 1 -> 2 -> 3 -> 4 -> 2 (cycle)
        node1.next = node2;
        node2.next = node3;
        node3.next = node4;
        node4.next = node2; // Create a cycle

        Solution solution = new Solution();
        
        // Remove the cycle
        solution.removeCycle(node1);

        // Print the linked list to verify the cycle is removed
        ListNode current = node1;
        while (current != null) {
            System.out.print(current.val + " ");
            current = current.next;
        }
    }
}
